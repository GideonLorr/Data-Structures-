#include<iostream>

#ifndef _VECTOR_H_
#define _VECTOR_H_

template<typename T>
class Vector {
public:
	Vector();
	Vector(T*, unsigned int);
	Vector(unsigned int);
	Vector(const Vector&);
	Vector& operator=(const Vector&);
	~Vector();

	void push_back(T);
	void pop_back();

	void resize();
	void reserve(unsigned int = 0);
	bool empty() const;
	void shrink_to_fit();

	void print() const;
	unsigned int get_size()  const;

	T& operator[](unsigned int);
	T& front() const;
	T& back()  const;
	T& at(unsigned int = 0);
	const T& at(unsigned int = 0) const;


private:
	T * data;
	unsigned int capacity;
	unsigned int size;

	void copy(const Vector&);
	void free();

};

template<typename T>
Vector<T>::Vector() : data(nullptr), capacity(0), size(0)
{}

template<typename T>
Vector<T>::Vector(T* pdata, unsigned int psize) {
	if (pdata) {
		data = new (std::nothrow) T[psize];
		if (!data)
			std::cerr << "Memory allocation has failed!\n";

		for (unsigned int i = 0; i < psize; ++i)
			data[i] = pdata[i];

		size = psize;

		for (capacity = 1; psize > 0; capacity *= 2, psize /= 2);
	}

	else
		capacity = 0;
}

template<typename T>
Vector<T>::Vector(unsigned int psize) : data(nullptr), size(0) {
	reserve(psize);
}

template<typename T>
Vector<T>::Vector(const Vector<T>& other) {
	copy(other);
}

template<typename T>
Vector<T>& Vector<T>::operator=(const Vector<T>& other) {
	if (this != &other) {
		free();
		copy(other);
	}

	return *this;
}

template<typename T>
Vector<T>::~Vector() {
	free();
}

template<typename T>
void Vector<T>::copy(const Vector<T>& other) {
	if (other.data) {
		data = new (std::nothrow) T[other.size];
		if (!data)
			std::cerr << "Memory allocation has failed!\n";

		for (unsigned int i = 0; i < other.size; ++i)
			data[i] = other.data[i];

		size = other.size;

		capacity = other.capacity;
	}
}

template<typename T>
void Vector<T>::free() {
	delete[] data;
	size = 0;
	capacity = 0;
}

template<typename T>
void Vector<T>::resize() {
	T* temp = nullptr;
	if(size == capacity)
		temp = new T[capacity == 0 ? capacity = 1 : capacity *= 2 ];
	else if(size < capacity/2)
		temp = new T[capacity /= 2];

	for (unsigned int i = 0; i < size; ++i)
		temp[i] = data[i];

	delete[] data;

	data = temp;
}

template<typename T>
void Vector<T>::reserve(unsigned int psize) {
	if (psize < capacity) {
		std::cerr << "The new size can't fit all elements from the current vector!\n";
		return;
	}

	unsigned int vector_reserve_size = 1;
	for (unsigned int i = 0, arg_copy = psize; arg_copy > 0; vector_reserve_size *= 2, arg_copy /= 2);

	if(!data) {
		T* temp = new T[capacity = vector_reserve_size];
		for (unsigned int i = 0; i < psize; ++i)
			temp[i] = 0;

		delete[] data;

		size = psize;
		data = temp;
		return;
	}

	for (unsigned int i = 0, vector_reserve_size = 1, result = psize + capacity; result > 0; vector_reserve_size *= 2, result /= 2);

	if(data) {
		T* temp = new T[capacity = vector_reserve_size];

		for (unsigned int i = 0; i < size; ++i)
			temp[i] = data[i];

		for (unsigned int i = size; i < vector_reserve_size; ++i)
			temp[i] = 0;

		size += psize;

		delete[] data;

		data = temp;
	}
}

template<typename T>
void Vector<T>::push_back(T elem) {
	if (size == capacity)
		resize();

	data[size++] = elem;
}

template<typename T>
void Vector<T>::pop_back() {
	--size;

	if (size < capacity / 2)
		resize();
}

template<typename T>
bool Vector<T>::empty() const {
	return size == 0;
}

template<typename T>
void Vector<T>::shrink_to_fit() {
	T* temp = new T[capacity = size];

	copy_reserve_resize(temp);
}

template<typename T>
unsigned int Vector<T>::get_size() const {
	return size;
}

template<typename T>
void Vector<T>::print() const {
	for (unsigned int i = 0; i < size; ++i)
		std::cout << data[i] << " ";
}

template<typename T>
T& Vector<T>::operator[](unsigned int index) {
	return data[index];
}

template<typename T>
T& Vector<T>::front() const {
	return data[0];
}

template<typename T>
T& Vector<T>::back() const {
	return data[size - 1];
}

//template<typename T>
//T& Vector<T>::at(unsigned int index) {
//	try {
//		if (index >= size) {
//			throw std::out_of_range("Out of range!");
//		}
//		else {
//			return data[index] = index;
//		}
//			
//	}
//	catch (const std::out_of_range& e) {
//		std::cerr << "Error: " << e.what() << '\n';
//	}
//}

template<typename T>
const T& Vector<T>::at(unsigned int index) const {
	try {
		if (index >= size) {
			throw std::out_of_range("Out of range!");
		}
		else
			return data[index];
	}
	catch (const std::out_of_range& e) {
		std::cerr << "Error: " << e.what() << '\n';
	}
}

#endif 

int main() {
	/*
	
	for (int i = 0; i < v.get_size(); ++i)
		v.at(i) = i;

	v.print();*/

	Vector<int> w;
	for (int i = 0; i < 10; ++i)
		w.push_back(i);

	Vector<int> v;
	v.push_back(6);
	v.push_back(9);
	v.push_back(3);
	


	std::cin.get();
	return 0;
}
